@model MedicalOffice.Models.Doctor

<partial name="_ViewHeading" />

<hr />
<partial name="_addSpecialtyModal" />
<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="ID" />
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="MiddleName" class="control-label"></label>
                <input asp-for="MiddleName" class="form-control" />
                <span asp-validation-for="MiddleName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Province:</label>
                <select class="form-control" id="ProvinceID" name="ProvinceID" asp-items="ViewBag.ProvinceID">
                </select>
            </div>
            <div class="form-group">
                <label asp-for="CityID" class="control-label"></label>
                <select asp-for="CityID" class="form-control" asp-items="ViewBag.CityID">
                    <option value="0">Select a Province First</option>
                </select>
                <span asp-validation-for="CityID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label"> Current Documents:</label>
                <div class="ml-md-3">
                    @{
                        int fileCount = Model.DoctorDocuments.Count;
                        if (fileCount > 0)
                        {
                            var firstFile = Model.DoctorDocuments.FirstOrDefault(); ;
                            if (fileCount > 1)
                            {
                                <a class="" role="button" data-bs-toggle="collapse" href="#collapseDocs@(Model.ID)" aria-expanded="false" aria-controls="collapseDocs@(Model.ID)">
                                    <span class="badge bg-info">@fileCount</span> Current Documents...
                                </a>
                                <div class="collapse" id="collapseDocs@(Model.ID)">
                                    @{
                                        foreach (var d in Model.DoctorDocuments)
                                        {
                                            <a asp-action="Download" asp-route-id="@d.ID">@d.FileName</a> <br />
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                <a asp-action="Download" asp-route-id="@firstFile.ID">@firstFile.FileName</a>
                            }
                        }
                    }
                </div>
            </div>
            <div class="form-group">
                <label class="control-label custom-file-label">Upload Additional Documents:</label>
                <div class="input-group mb-3">
                    <input type="file" class="form-control" name="theFiles" multiple="multiple">
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label"> Specialties Accredited</label> <button type="button" id="btnRight" class="btn btn-danger btn-sm">
                        <strong>-</strong>
                    </button>
                    @Html.ListBox("selectedOptions", (MultiSelectList)ViewBag.selOpts, new { @size = 10, @class = "form-control", @style="margin-top: 0.5rem;" })
                </div>

                <div class="form-group col-md-6">
                    <label class="control-label"> Choose Specialties</label> <button type="button" id="btnLeft" class="btn btn-success btn-sm">
                        <strong>+</strong>
                    </button>&nbsp;&nbsp;
                    <button class="btn btn-sm btn-outline-secondary" id="nowAddSpecialty"
                            data-bs-toggle="modal" data-bs-target="#addSpecialtyModal"
                            type="button">
                        <strong>Add Specialty</strong>
                    </button>
                    @Html.ListBox("availOptions", (MultiSelectList)ViewBag.availOpts, new { @size = 10, @class = "form-control", @style="margin-top: 0.5rem;" })
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <input type="submit" id="btnSubmit" value="Save" class="btn btn-primary" />
    </div>
</form>

<div>
    <partial name="_BackToList" />
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/multiselect.js"></script>
    <script src="~/js/refreshDDL.js"></script>
    <script type="text/javascript">
        $('#ProvinceID').change(function () {
            var selectedProvince = $("#ProvinceID").val();
            var URL = "/Doctor/GetCities/?ProvinceID=" + selectedProvince;
            refreshDDL('CityID', URL, true, 'Select a Province with Cities first', false, null, true);
        });
    </script>
    <script type="text/javascript">
        $('#submitSpecialtyCreate').click(function (event) {
            event.preventDefault();
            ClearErrors();
            var form = $('#createSpecialtyForm');
            if (form.valid()) {
                $.ajax({
                    type: "POST",
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function () {
                        $('#addSpecialtyModal').modal('hide');
                    },
                    error: function (xhr) { 
                        var errorMessages = [];
                        switch (xhr.status) {
                            case 401:
                                errorMessages.push("You must be logged in first.");
                                break;
                            case 403:
                                errorMessages.push("You are not authorized for this action.");
                                break;
                            default:
                                //Messages coming from the Model State Errors
                                //We split on the | delimeter and the .slice removes the last one
                                errorMessages = xhr.responseText.split("|").slice(0, -1);
                        }
                        //This checks if there are any elements with some content
                        //and if not then it provides a default feedback message.
                        if (!errorMessages.some((str) => str !== "")) {
                            errorMessages.push("Error: Unable to complete operation");
                        }
                        var ul = document.getElementById("ErrorList");
                        for (var i = 0; i < errorMessages.length; i++) {
                            var errorMessage = errorMessages[i];
                            var li = document.createElement("li");
                            li.innerHTML = errorMessage;
                            ul.appendChild(li);
                        }
                    }
                });
            }
            return false;
        });
        $('#addSpecialtyModal').on('hide.bs.modal', function () {
            document.getElementById("createSpecialtyForm").reset();//to clear the data in the popup form
            ClearErrors();
            //This will create a delimited list of the keys of the selected options and
            //we will pass it as a QueryString parameter when we get the new data
            var qstring = "";
            //Get the collection of currently selected options
            var skipData = $("#selectedOptions option");
            $.each(skipData, function () {
                qstring += $(this).val() + "|";
            });
            var URI = "/Doctor/GetSpecialties?skip=" + qstring.slice(0, -1);
            refreshDDL("availOptions", URI, true, "No Data Available", false, null, false);
        });
        function ClearErrors() {
            //Empty out the list of validation errors if there are any
            var ul = document.getElementById("ErrorList");
            while (ul.firstChild) {
                ul.removeChild(ul.firstChild);
            }
        }
    </script>

}
