// <auto-generated />
using System;
using MedicalOffice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalOffice.Data.MOMigrations
{
    [DbContext(typeof(MedicalOfficeContext))]
    partial class MedicalOfficeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("MedicalOffice.Models.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppointmentReasonID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExtraFee")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentReasonID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalOffice.Models.AppointmentReason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AppointmentReasons");
                });

            modelBuilder.Entity("MedicalOffice.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvinceID")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("Name", "ProvinceID")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MedicalOffice.Models.Condition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalOffice.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecialtyID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DoctorID", "SpecialtyID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("MedicalOffice.Models.FileContent", b =>
                {
                    b.Property<int>("FileContentID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.HasKey("FileContentID");

                    b.ToTable("FileContent");
                });

            modelBuilder.Entity("MedicalOffice.Models.MedicalTrial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TrialName")
                        .IsUnique();

                    b.ToTable("MedicalTrials");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("ExpYrVisits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MedicalTrialID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OHIP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("MedicalTrialID");

                    b.HasIndex("OHIP")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientCondition", b =>
                {
                    b.Property<int>("ConditionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConditionID", "PatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientConditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientPhotos");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientThumbnail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientThumbnails");
                });

            modelBuilder.Entity("MedicalOffice.Models.Province", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MedicalOffice.Models.Specialty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("MedicalOffice.Models.UploadedFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("UploadedFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UploadedFile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MedicalOffice.ViewModels.AppointmentReasonSummaryVM", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageAge")
                        .HasColumnType("REAL");

                    b.Property<double>("MaximumFeeCharged")
                        .HasColumnType("REAL");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReasonName")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalExtraFees")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable((string)null);

                    b.ToView("AppointmentReasonSummaries", (string)null);
                });

            modelBuilder.Entity("MedicalOffice.ViewModels.AppointmentSummaryVM", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaximumFeeCharged")
                        .HasColumnType("REAL");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalExtraFees")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable((string)null);

                    b.ToView("AppointmentSummaries", (string)null);
                });

            modelBuilder.Entity("MedicalOffice.Models.DoctorDocument", b =>
                {
                    b.HasBaseType("MedicalOffice.Models.UploadedFile");

                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DoctorID");

                    b.HasDiscriminator().HasValue("DoctorDocument");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientDocument", b =>
                {
                    b.HasBaseType("MedicalOffice.Models.UploadedFile");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PatientID");

                    b.HasDiscriminator().HasValue("PatientDocument");
                });

            modelBuilder.Entity("MedicalOffice.Models.Appointment", b =>
                {
                    b.HasOne("MedicalOffice.Models.AppointmentReason", "AppointmentReason")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentReasonID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalOffice.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentReason");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.City", b =>
                {
                    b.HasOne("MedicalOffice.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MedicalOffice.Models.Doctor", b =>
                {
                    b.HasOne("MedicalOffice.Models.City", "City")
                        .WithMany("Doctors")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("MedicalOffice.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("MedicalOffice.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("MedicalOffice.Models.FileContent", b =>
                {
                    b.HasOne("MedicalOffice.Models.UploadedFile", "UploadedFile")
                        .WithOne("FileContent")
                        .HasForeignKey("MedicalOffice.Models.FileContent", "FileContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.HasOne("MedicalOffice.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.MedicalTrial", "MedicalTrial")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalTrialID");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalTrial");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientCondition", b =>
                {
                    b.HasOne("MedicalOffice.Models.Condition", "Condition")
                        .WithMany("PatientConditions")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientPhoto", b =>
                {
                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithOne("PatientPhoto")
                        .HasForeignKey("MedicalOffice.Models.PatientPhoto", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientThumbnail", b =>
                {
                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithOne("PatientThumbnail")
                        .HasForeignKey("MedicalOffice.Models.PatientThumbnail", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.DoctorDocument", b =>
                {
                    b.HasOne("MedicalOffice.Models.Doctor", "Doctor")
                        .WithMany("DoctorDocuments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientDocument", b =>
                {
                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithMany("PatientDocuments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.AppointmentReason", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MedicalOffice.Models.City", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalOffice.Models.Condition", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorDocuments");

                    b.Navigation("DoctorSpecialties");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.MedicalTrial", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientDocuments");

                    b.Navigation("PatientPhoto");

                    b.Navigation("PatientThumbnail");
                });

            modelBuilder.Entity("MedicalOffice.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MedicalOffice.Models.Specialty", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("MedicalOffice.Models.UploadedFile", b =>
                {
                    b.Navigation("FileContent");
                });
#pragma warning restore 612, 618
        }
    }
}
